(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var SWMap, data, i, p, unemployment_map, _i, _len;

SWMap = require('./script/SWMap');

data = Highcharts.geojson(Highcharts.maps['custom/world']);

for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
  p = data[i];
  p.value = i + 1;
  p.drilldown = true;
}

unemployment_map = new SWMap({
  data: data
});

$(function() {
  return unemployment_map.attach($('#map'));
});



},{"./script/SWMap":2}],2:[function(require,module,exports){
var SWMap, default_opts;

default_opts = require('./sw_map_options');

SWMap = (function() {
  function SWMap(options) {
    var series;
    this.opts = default_opts;
    series = this.opts.series[0];
    series.data = options.data;
    series.mapData = options.mapData;
    series.joinBy = options.joinBy;
    this.opts.chart.events.drilldown = (function(_this) {
      return function(e) {
        return _this._handle_drilldown(e);
      };
    })(this);
    this.opts.chart.events.drillup = (function(_this) {
      return function(e) {
        return _this._handle_drillup(e);
      };
    })(this);
  }

  SWMap.prototype.attach = function($el) {
    return this.chart = $el.highcharts('Map', this.opts);
  };

  SWMap.prototype._handle_drilldown = function(e) {
    var chart, map_key;
    chart = e.currentTarget;
    if (!e.seriesOptions) {
      map_key = this._map_key_from_point(e.point);
      if (!Highcharts.maps[map_key]) {
        chart.showLoading('<i class="icon-spinner icon-spin icon-3x"></i>');
        return $.getScript(this._map_data_url(map_key)).done((function(_this) {
          return function() {
            _this._do_drilldown(chart, e.point, map_key);
            return chart.hideLoading();
          };
        })(this)).fail((function(_this) {
          return function() {
            console.log('failed to get map data.');
            return chart.hideLoading();
          };
        })(this));
      } else {
        return this._do_drilldown(chart, e.point, map_key);
      }
    }
  };

  SWMap.prototype._do_drilldown = function(chart, point, map_key) {
    var data, i, p, _i, _len;
    data = Highcharts.geojson(Highcharts.maps[map_key]);
    for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
      p = data[i];
      p.value = i + 1;
      p.drilldown = this._point_can_drilldown(p);
    }
    return chart.addSeriesAsDrilldown(point, {
      name: point.name,
      data: data,
      dataLabels: {
        enabled: true,
        format: '{point.name}'
      }
    });
  };

  SWMap.prototype._map_key_from_point = function(point) {
    var ans, country, hc_key, parts;
    hc_key = point.properties['hc-key'];
    parts = hc_key.split('-');
    if (!parts.length) {
      return void 0;
    }
    country = parts[0];
    ans = "countries/" + country + "/" + hc_key + "-all";
    return ans;
  };

  SWMap.prototype._map_data_url = function(map_key) {
    return 'http://code.highcharts.com/mapdata/' + map_key + '.js';
  };

  SWMap.prototype._point_can_drilldown = function(point) {
    var hc_key, parts;
    hc_key = point.properties['hc-key'];
    parts = hc_key.split('-');
    if (!parts.length) {
      return false;
    }
    if (parts.length === 1) {
      return true;
    }
    if (parts.length === 2 && parts[0] === 'us') {
      return true;
    }
    return false;
  };

  SWMap.prototype._handle_drillup = function(e) {
    return console.log('drill up');
  };

  return SWMap;

})();

module.exports = SWMap;



},{"./sw_map_options":3}],3:[function(require,module,exports){
module.exports = {
  chart: {
    borderWidth: 0,
    borderColor: '#759F00',
    events: {
      drilldown: null,
      drillup: null
    }
  },
  title: {
    text: 'Waivers'
  },
  legend: {
    layout: 'vertical',
    borderWidth: 0,
    backgroundColor: 'rgba(255,255,255,0.85)',
    floating: false,
    verticalAlign: 'middle',
    align: 'left',
    y: 50
  },
  mapNavigation: {
    enabled: true
  },
  colorAxis: {
    min: 1,
    type: 'logarithmic',
    minColor: '#FFFFFF',
    maxColor: '#759F00'
  },
  series: [
    {
      animation: {
        duration: 1000
      },
      data: null,
      mapData: null,
      joinBy: null,
      dataLabels: {
        enabled: true,
        color: 'white',
        format: '{point.name}'
      },
      name: 'World',
      tooltip: {
        pointFormat: '{point.name}: {point.value}/kmÂ²'
      }
    }
  ],
  drilldown: {
    activeDataLabelStyle: {
      color: 'white',
      textDecoration: 'none'
    },
    drillUpButton: {
      relativeTo: 'spacingBox',
      position: {
        x: 0,
        y: 0
      }
    }
  }
};



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
